% SAMPLESTUDY_GUI_PROCESS is a simplified version of the SAMPLESTUDY_PROCES script
% which can be run from this script or via similar steps in the ensembler GUI. 
%
% AUDIENCE: 
% - The approach taken here could be used to allow students new to biomechanics data
%   processing to analyze typical Vicon motion capture data. 
%
% NOTES
% - biomechZoo and biomechzoo-help folders should be added to the MatLab path before 
%   starting the demo.This can be accomplished by running startZoo.m (located in the root 
%   biomechZoo folder)
% - Sample data can be downloaded as part of the 'biomechZoo-help' repository at 
%   https://github.com/PhilD001/biomechzoo-help
% - Run mode ('auto','manual'). If input set to 'auto' (default) all processing steps are 
%   run automatically without user input. In manual mode, each processing step should 
%   operate on a new folder. This allows the user to check each process before moving on. 
% - The user is encouraged to first run through the entire script in 'auto' mode to ensure
%   biomechZoo is properly loaded. Afterwards, exploraton of each step will help 
%   the user understand the procedure.
% - Individual processess performed here can be explored in 'standalone' form. Please see 
%   'biomechzoo-help/examples' for a list of sample scripts
%
% THE STUDY
% - 12 subjects were asked to perform straight walking (Straight) and 90 degree turning
%   while walking (Turn) trials in a typical motion capture environment while fit with the
%   Plug-in Gait (PiG) markers.
% - For the purposes of this demo, we will hypothesize that there are differences between
%   conditons for:
%   (2) Maximum ankle plantarflexion angle
%   (3) Maximum Knee flexion angle 
%   (4) Maximum pelvis medio-lateral displacement
%
% *  In contrast to the samplestudy_process script, here we will only use
%    outputs generated by Vicon
% ** This 'study' is not designed to provide meanigful outputs, only to
%    show how to process data. 
%
% Created by Philippe C. Dixon July 1 2017
%
% see http://www.biomechzoo.com for the latest updates on the biomechZoo project
%
%
% License, citations, and latest version information, type 'zooinfo'


%% Step 0: Set run mode ------------------------------------------------------------------
%
% - If mode is set to 'auto', all processes will apply to the new folder called 
%   'zoo files (auto process)' created in this step
% - If mode is set to 'manual', the user can run each cell (step 1-9) indivdually, each 
%   time manually copying a new folder for each step

mode = 'auto';                                                      % entire code

if strfind(mode,'auto')                                             %#ok<*STRIFCND>
    tic
    rfld = fullfile(fileparts(which('samplestudy')),'Data');
    fld1 = fullfile(rfld,'raw c3d files');
    fld2 = fullfile(rfld,'zoo files (basic process)');
    disp('Creating process folder:')
    disp(fld2)
    copyfile(fld1,fld2)
    cd(fld2)
    fld = fld2;
end

%% Step 1: Conversion to the biomechZoo format -------------------------------------------
%
% - In this step, we convert data from origial format (.c3d) to zoo format (.zoo)
% - User should create a copy of folder 'raw c3d files' called '1-c3d2zoo'. This will 
%   allow us to return to the original data at any time

if strfind(mode,'manual')
    fld = uigetfolder('select ''1-c3d2zoo''');
end

c3d2zoo(fld);                                                      % conv c3d 

% User notes:
% - Explore the structure of a raw zoo file by typing 'grab' and selecting any file
% - In this basic mode, c3d files are kept alongside zoo files

%% Step 2: Split 3D channels
%
% - In this step, channels containing 3D data (n x 3) are split into three
%   separate n x 1 channels. This step is performed to allow data to be
%   graphed separately in ensembler

if strfind(mode,'manual')
    fld  = uigetfolder('select ''2-explode''');
end

bmech_explode(fld)

% User Notes
% - In the GUI version, only labelled axes will be exploded

%% Step 3: Partitioning the data ---------------------------------------------------------
%
% - This step limits the analysis to a single gait cycle for the left limb
% - Data are partitionned based on either: 
%   (1) Events manually indentifiled in Vicon 
%   (2) Events identified here using zeni method 
% - The user should create a copy of folder '2-explode' called '3-partition'

if strfind(mode,'manual')
    fld  = uigetfolder('select ''3-partition''');
end

sfld = 'Static';                                                   % folder not to process

evt1 = 'LFS2';                                                     % 1st evt (biomechZoo)
evt2 = 'LFS3';                                                     % 2nd evt (biomechZoo)
bmech_gaitevents(fld,sfld)                                         % add events

% evt1 = 'Left_FootStrike1';                                       % 1st event (Vicon)
% evt2 = 'Left_FootStrike2';                                       % 2nd event (Vicon)

bmech_partition(fld,evt1,evt2,sfld)                   

% User notes:
% - Static pose trials in the 'Static' folder do not contain gait events
%   and are skipped
% - If user wishes to use Vicon events, comment bmech_gaitevents code and
%   uncomment Vicon events
% - In the existing data set, some Vicon events were not identified, so
%   method (1) will not work for all trials
% - Choice of side (left vs right) and gait cycle to analyse is not important,
%   but 'LFS1' to 'LFS2' was chosen here since all files had at least 2
%   left foot strikes and could therefore be partitionned

%% Step 4: Adding events -----------------------------------------------------------------
%
% - In this step, discrete events along the curves are identified for statistical analysis
%   (see hypotheses)
% - User should create a copy of folder '3-partition' called '4-add events'.

if  strfind(mode,'manual')
    fld = uigetfolder('select ''3-add events''');
end

bmech_addevent(fld,'LAnkleAngles_x','min','min')                   % max ankle pflex angle  
bmech_addevent(fld,'LKneeAngles_x','max','max')                    % max knee flex angle
bmech_addevent(fld,'PELO_x','rom','rom')                           % m-l ROM of trunk 


% User notes:
% - Since the 'maximum' plantarflexion is a negative quantity we search for the
%   minimum 'min' instead
% - Local events have been added to the event branch of the channels selected. Users can
%   explore data by typing 'grab', selecting a file and plotting using 'zplot', e.g.:
%   'zplot(data.LAnkleAngles_x)'


%% Step 5: Normalizing -------------------------------------------------------------------
%
% - This step normalizes all channels to a single gait cycle length of 101 frames (0-100%)
% - User should create a copy of folder '3-add events' called '4-normalize'

if  strfind(mode,'manual')
    fld = uigetfolder('select ''4-normalize''');
end

bmech_normalize(fld)                                               % select chns

% User notes:
% - Static trial normalization is meaningless, but run for simplicity of code
% - All static files could have been deleted by calling bmech_removefolder(fld,'Static')


%% Step 5: Statistical analysis ----------------------------------------------------------
%
% - After processing is complete, it is now possible to export the
%   data for statistical analysis
%
% METHOD A: Exporting to spreadsheet (using the eventval function)
%
if strfind(mode,'manual')
    fld = uigetfolder('select ''4-normalize''');
end

excelserver = 'off';                                               % switch to 'on' 
ext = '.xlsx';                                                     % if java error

levts = {'min','max','ROM'};                                       % local evts
gevts = {'none'};                                                  % global evts
ch    = {'LAnkleAngles_x','LKneeAngles_x','PELO_x'};               % to export
dim1  = {'Straight','Turn'};                                       % conditions
dim2  = {'HC002D','HC030A','HC031A','HC032A','HC033A','HC036A',... % subjects
         'HC038A','HC039A','HC040A','HC044A','HC050A','HC055A'};
    
eventval('fld',fld,'dim1',dim1,'dim2',dim2,'localevts',levts,...
     'globalevts',gevts,'ch',ch,'excelserver',excelserver,...
     'ext',ext)
                                                 
% - If you run into problems take a look at the exisiting 'eventval.xls' file
% - Outliers will show as 999
% - Check that data in excel sheet matches zoo data using grab
% - This sheet can be imported into SPSS/R or other programs to test the hypotheses...
%   what do you find?
% - On mac or if excel is not installed on computer, 'excelserver' must be set to 'off'



% METHOD B: Analysis within the Matlab environment (using extractevents.m)
%
dim1  = {'Straight','Turn'};                                       % conditions
dim2  = {'HC002D','HC030A','HC031A','HC032A','HC033A','HC036A',... % subjects
         'HC038A','HC039A','HC040A','HC044A','HC050A','HC055A'};
alpha = 0.05;

% LAnkleAngles_x min (maximum plantar flexion angle)
%
ch  = 'LAnkleAngles_x';
evt = 'min';
r = extractevents(fld,dim1,dim2,ch,evt);
[~,pval] = ttest(r.Straight,r.Turn,alpha);                                  
disp(['p-value for ankle plantarflex = ',num2str(pval)])
disp(['Ankle plantarflex Straight = ',sprintf('%.1f',nanmean(r.Straight)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Straight)),' deg'])
disp(['Ankle plantarflex Turn =     ',sprintf('%.1f',nanmean(r.Turn)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Turn)),' deg'])
disp(' ')

% LKneeAngles_x max (maximum flexion in swing) 
%
ch  = 'LKneeAngles_x';
evt = 'max';
r = extractevents(fld,dim1,dim2,ch,evt);
[~,pval] = ttest(r.Straight,r.Turn,alpha);                                  
disp(['p-value for Knee flexion = ',num2str(pval)])
disp(['Knee flexion Straight = ',sprintf('%.1f',nanmean(r.Straight)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Straight)),' Nmm/Kg'])
disp(['Knee flexion Turn =     ',sprintf('%.1f',nanmean(r.Turn)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Turn)),' Nmm/kg'])
disp(' ')


% PELO_x rom (medio-lateral range of motion of pelvis)  
%
ch  = 'PELO_x';
evt = 'rom';
r = extractevents(fld,dim1,dim2,ch,evt);
[~,pval] = ttest(r.Straight,r.Turn,alpha);                                 
disp(['p-value for Pelvis ROM = ',num2str(pval)])
disp(['Pelvis ROM  Straight = ',sprintf('%.1f',nanmean(r.Straight)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Straight)),' mm'])
disp(['Pelvis ROM  Turn =    ',sprintf('%.1f',nanmean(r.Turn)),...
    ' +/- ',sprintf('%.1f',nanstd(r.Turn)),' mm'])
disp(' ')

if strfind(mode,'auto')
    disp(' ')
    disp('**********************************')
    disp('Finished running demo program in : ')
    toc
    disp('**********************************')
end

